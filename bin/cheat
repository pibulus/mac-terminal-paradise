#!/bin/bash
# Pablo's Ultimate Interactive Terminal Cheatsheet
# Save this as ~/bin/cheat and chmod +x it

# Colors
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track if user is new
FIRST_RUN_FILE="$HOME/.cheat_welcomed"

# Welcome screen for first run
show_welcome() {
    if [ ! -f "$FIRST_RUN_FILE" ]; then
        clear
        echo -e "${CYAN}"
        figlet "Welcome!" | lolcat
        echo -e "${NC}"
        
        gum style \
            --border double \
            --border-foreground 212 \
            --padding "1 2" \
            --margin "1" \
            --align center \
            "🎉 WELCOME TO YOUR TERMINAL SUPERPOWER GUIDE! 🎉

This interactive guide will teach you everything about
your amazing terminal setup. Let's start with a quick tour!"
        
        echo ""
        if gum confirm "Ready for the tour?"; then
            show_quick_tour
        fi
        touch "$FIRST_RUN_FILE"
    fi
}

# Quick tour for new users
show_quick_tour() {
    clear
    gum style \
        --border rounded \
        --border-foreground 99 \
        --padding "1 2" \
        "🚀 QUICK TOUR - 5 ESSENTIAL COMMANDS

1. z [folder] → Jump to ANY folder instantly
   Try: z down → Goes to Downloads!

2. Cmd+\` → Summon terminal from ANYWHERE
   This is your new superpower!

3. lazygit → Visual git (in any git folder)
   Never type git commands again!

4. fzf → Find ANYTHING instantly
   Ctrl+R for history, Ctrl+T for files

5. btop → Beautiful system monitor
   Press 'p' to change themes!"
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

# Main menu function
show_menu() {
    clear
    echo -e "${CYAN}"
    figlet "Cheat Menu" | lolcat
    echo -e "${NC}"
    
    CHOICE=$(gum choose \
        "🎮 Ghostty Shortcuts" \
        "⚡ Custom Keybindings (Your Secret Weapons)" \
        "🎹 TMUX-Style Commands (Cmd+B)" \
        "📁 File Navigation" \
        "🎨 Fun & Visual Commands" \
        "🔥 Git Commands" \
        "🛠️ System Monitoring" \
        "🖼️ Image & Media Tools" \
        "⌨️ Terminal Shortcuts" \
        "🌟 Modern CLI Tools (Your Replacements)" \
        "📝 Functions & Aliases" \
        "🎯 Interactive Tutorials" \
        "🔍 Search Everything" \
        "📚 Full Cheatsheet" \
        "🌈 Show Me Something Cool" \
        "💡 Daily Power Tip" \
        "🚀 Svelte Development" \
        "📦 Dotfiles Management" \
        "🧪 Test My Setup" \
        "❌ Exit")
    
    case "$CHOICE" in
        "🎮 Ghostty Shortcuts")
            show_ghostty_shortcuts
            ;;
        "⚡ Custom Keybindings (Your Secret Weapons)")
            show_custom_keybindings
            ;;
        "🎹 TMUX-Style Commands (Cmd+B)")
            show_tmux_commands
            ;;
        "📁 File Navigation")
            show_file_navigation
            ;;
        "🎨 Fun & Visual Commands")
            show_fun_commands
            ;;
        "🔥 Git Commands")
            show_git_commands
            ;;
        "🛠️ System Monitoring")
            show_system_tools
            ;;
        "🖼️ Image & Media Tools")
            show_image_tools
            ;;
        "⌨️ Terminal Shortcuts")
            show_terminal_shortcuts
            ;;
        "🌟 Modern CLI Tools (Your Replacements)")
            show_modern_tools
            ;;
        "📝 Functions & Aliases")
            show_functions_aliases
            ;;
        "🎯 Interactive Tutorials")
            show_tutorials_menu
            ;;
        "🔍 Search Everything")
            show_search_menu
            ;;
        "📚 Full Cheatsheet")
            glow ~/terminal-cheatsheet.md | less
            ;;
        "🌈 Show Me Something Cool")
            show_something_cool
            ;;
        "💡 Daily Power Tip")
            show_power_tip
            ;;
            "🚀 Svelte Development")
            show_svelte_dev
            ;;
        "📦 Dotfiles Management")
            show_dotfiles_management
            ;;
        "🧪 Test My Setup")
            test_setup
            ;;
        "❌ Exit")
            echo "Remember: type 'cheat' anytime to come back! 👋"
            exit 0
            ;;
    esac
    
    echo ""
    gum confirm "Back to menu?" && show_menu
}

# NEW: Custom keybindings section
show_custom_keybindings() {
    gum style \
        --border double \
        --border-foreground 212 \
        --padding "1 2" \
        --margin "1" \
        "⚡ YOUR CUSTOM KEYBINDINGS - SECRET WEAPONS!

🔍 SEARCH & EDIT
Ctrl+F  → Find file & edit it instantly!
Ctrl+T  → FZF file search
Ctrl+R  → Search command history (fuzzy!)
Alt+C   → Change directory with preview

📁 GIT INTEGRATION  
Ctrl+G  → Interactive git status
         (select files, see diffs!)

🚀 QUICK ACTIONS
Ctrl+P  → Find & kill processes
Alt+D   → Jump to recent directories (zi)
ESC ESC → Add 'sudo' to command!

💡 HISTORY MAGIC
↑/↓     → Search history by what you typed
         (type 'git' then ↑ for git commands!)

⚠️  THESE ARE YOUR UNIQUE POWERS!
Most people don't have these - you do!"
    
    echo ""
    if gum confirm "Want to try Ctrl+F now?"; then
        echo "Press Ctrl+F to find and edit a file!"
        read -n 1
    fi
}

# NEW: Modern tools section
show_modern_tools() {
    gum style \
        --border double \
        --border-foreground 87 \
        --padding "1 2" \
        --margin "1" \
        "🌟 YOUR MODERN CLI REPLACEMENTS

OLD → NEW (What you have!)
─────────────────────────
cat   → bat      (syntax highlighting!)
ls    → eza      (icons + git status!)
find  → fd       (5x faster!)
grep  → rg       (ripgrep - blazing fast!)
cd    → z        (smart jumps!)
top   → btop     (beautiful graphs!)
htop  → btop     (even better!)
ps    → procs    (intuitive output!)
du    → dust     (visual disk usage!)
df    → duf      (disk usage that makes sense!)
man   → tldr     (examples first!)
diff  → delta    (side-by-side diffs!)
dig   → dog      (colorful DNS!)
ping  → gping    (graph your ping!)

🎯 QUICK TEST
Try these NOW to see the difference:
• ls vs eza --icons
• cat file vs bat file
• ps vs procs"
    
    echo ""
    DEMO=$(gum choose "Compare ls vs eza" "Compare cat vs bat" "Compare ps vs procs" "Skip demo")
    case "$DEMO" in
        "Compare ls vs eza")
            echo -e "${YELLOW}Old ls:${NC}"
            ls -la | head -10
            echo -e "\n${GREEN}Your eza:${NC}"
            eza -la --icons | head -10
            gum input --placeholder "See the difference? Press enter..."
            ;;
        "Compare cat vs bat")
            echo "cat ~/.zshrc:" 
            cat ~/.zshrc | head -20
            echo -e "\n${GREEN}bat ~/.zshrc:${NC}"
            bat ~/.zshrc --line-range=1:20
            ;;
        "Compare ps vs procs")
            echo -e "${YELLOW}Old ps:${NC}"
            ps aux | head -10
            echo -e "\n${GREEN}Your procs:${NC}"
            procs | head -10
            ;;
    esac
}

# NEW: Functions and aliases section
show_functions_aliases() {
    gum style \
        --border double \
        --border-foreground 214 \
        --padding "1 2" \
        --margin "1" \
        "📝 YOUR CUSTOM FUNCTIONS & ALIASES

🚀 QUICK SHORTCUTS
reload    → Reload your terminal config
zshrc     → Edit your .zshrc
mkcd      → Make directory AND enter it
backup    → Backup file with timestamp
extract   → Extract ANY archive type
ginit     → Start git repo with .gitignore
targz     → Create tar.gz archive
note      → Add a quick note
notes     → View all your notes
weather   → Get weather (weather Tokyo)
cht       → Cheatsheet for any command

📂 SMART NAVIGATION  
..        → cd ..
...       → cd ../..
-         → cd to previous directory
~         → cd to home

🌐 NETWORK
myip      → Your public IP
localip   → Your local IP  
ports     → Show listening ports
serve     → Start Python web server
speedtest → Test internet speed

💡 TRY THIS
Type 'mkcd test-folder' - it creates AND enters!"
    
    echo ""
    if gum confirm "Try mkcd now?"; then
        FOLDER=$(gum input --placeholder "Folder name to create...")
        if [ -n "$FOLDER" ]; then
            mkcd "$FOLDER"
            echo "You're now in: $(pwd)"
            echo "Type 'cd -' to go back!"
            gum input --placeholder "Press enter..."
        fi
    fi
}

# NEW: Interactive tutorials menu
show_tutorials_menu() {
    TUTORIAL=$(gum choose \
        "🚀 Master FZF (Fuzzy Finding)" \
        "📁 Master Zoxide (Smart CD)" \
        "🎨 Master Eza (Beautiful LS)" \
        "🔥 Master Lazygit" \
        "⚡ Master Terminal Navigation" \
        "🎯 Build a Quick Workflow" \
        "Back to menu")
    
    case "$TUTORIAL" in
        "🚀 Master FZF (Fuzzy Finding)")
            tutorial_fzf
            ;;
        "📁 Master Zoxide (Smart CD)")
            tutorial_zoxide
            ;;
        "🎨 Master Eza (Beautiful LS)")
            tutorial_eza
            ;;
        "🔥 Master Lazygit")
            tutorial_lazygit
            ;;
        "⚡ Master Terminal Navigation")
            tutorial_navigation
            ;;
        "🎯 Build a Quick Workflow")
            tutorial_workflow
            ;;
    esac
}

# FZF Tutorial
tutorial_fzf() {
    clear
    gum style \
        --border rounded \
        --border-foreground 99 \
        --padding "1 2" \
        "🚀 FZF MASTERY COURSE

FZF = Fuzzy Finder = Find ANYTHING instantly!

LESSON 1: Basic FZF"
    
    echo ""
    gum confirm "Ready to try fzf?" && {
        echo "Type 'fzf' and press enter. Type to filter, arrows to select, enter to choose:"
        fzf
    }
    
    echo ""
    gum style \
        --border rounded \
        --border-foreground 99 \
        --padding "1 2" \
        "LESSON 2: Power Shortcuts

Ctrl+T → Find any file (with preview!)
Ctrl+R → Search ALL your command history
Alt+C  → cd to any directory

TRY IT: Press Ctrl+R right now!"
    
    gum input --placeholder "Try Ctrl+R, then press enter to continue..."
    
    gum style \
        --border rounded \
        --border-foreground 99 \
        --padding "1 2" \
        "LESSON 3: Advanced FZF

# Find and edit files
vim \$(fzf)

# Kill processes interactively  
kill -9 \$(ps aux | fzf | awk '{print \$2}')

# Git branch switching
git checkout \$(git branch | fzf)

# Search file contents
rg --files | fzf --preview 'bat {}'"
    
    echo ""
    gum input --placeholder "You're now an FZF master! Press enter..."
}

# Zoxide tutorial
tutorial_zoxide() {
    clear
    gum style \
        --border rounded \
        --border-foreground 214 \
        --padding "1 2" \
        "📁 ZOXIDE MASTERY - CD ON STEROIDS!

Zoxide learns your habits and lets you jump anywhere!

LESSON 1: Basic Usage
Instead of: cd ~/Documents/Projects/my-app
Just type:  z my-app

Instead of: cd ../../../Downloads
Just type:  z down"
    
    echo ""
    echo "Your most visited directories:"
    zoxide query -l | head -10
    
    echo ""
    gum confirm "Want to see interactive mode?" && {
        echo "Type 'zi' for interactive selection:"
        echo "(Press Ctrl+C if you want to cancel)"
        zi
    }
    
    gum style \
        --border rounded \
        --border-foreground 214 \
        --padding "1 2" \
        "ADVANCED TIPS:

z foo       → Jump to best match with 'foo'
z foo bar   → Jump to best match with 'foo' AND 'bar'
zi          → Interactive selection
z -         → Go back to previous directory

POWER MOVE: Combine with fzf!
z \$(fd -t d | fzf)  → Choose from ALL directories!"
}

# Search menu
show_search_menu() {
    SEARCH_TYPE=$(gum choose \
        "📄 Search in files (ripgrep)" \
        "📁 Search filenames (fd)" \
        "📚 Search cheatsheet" \
        "🔙 Back")
    
    case "$SEARCH_TYPE" in
        "📄 Search in files (ripgrep)")
            PATTERN=$(gum input --placeholder "Search pattern...")
            if [ -n "$PATTERN" ]; then
                echo "Searching for '$PATTERN'..."
                rg "$PATTERN" --color=always | head -20
            fi
            ;;
        "📁 Search filenames (fd)")
            PATTERN=$(gum input --placeholder "Filename pattern...")
            if [ -n "$PATTERN" ]; then
                fd "$PATTERN" --color=always | head -20
            fi
            ;;
        "📚 Search cheatsheet")
            search_cheatsheet
            ;;
    esac
    gum input --placeholder "Press enter to continue..."
}

# Power tip of the day
show_power_tip() {
    TIPS=(
        "🚀 TIP: Press 'v' in lazygit to edit files directly!"
        "⚡ TIP: Type '!!' to run your last command again!"
        "🎯 TIP: Use 'Alt+.' to insert the last argument from previous command!"
        "💡 TIP: Type 'fuck' after a failed command to fix it!"
        "🔥 TIP: In fzf, use 'Ctrl+/' to toggle preview window!"
        "📁 TIP: Type '-' to go back to previous directory!"
        "🎨 TIP: Run 'btop' and press 'p' to cycle through themes!"
        "⌨️ TIP: Start typing and press → to accept autosuggestion!"
        "🌟 TIP: Use 'gw' to switch between git worktrees!"
        "📊 TIP: Run 'duf' for beautiful disk usage info!"
        "🔍 TIP: Use 'tldr <command>' for quick examples!"
        "🚀 TIP: Press Ctrl+G for interactive git status!"
        "💾 TIP: Use 'backup <file>' to create timestamped backup!"
        "🎯 TIP: Type 'zi' for interactive directory jumping!"
        "⚡ TIP: Double-tap ESC to add 'sudo' to your command!"
    )
    
    # Show a random tip with style
    TIP="${TIPS[$RANDOM % ${#TIPS[@]}]}"
    
    clear
    echo -e "${CYAN}"
    figlet "Power Tip!" | lolcat
    echo -e "${NC}"
    
    gum style \
        --border double \
        --border-foreground 212 \
        --padding "2 4" \
        --margin "1" \
        --align center \
        "$TIP"
    
    echo ""
    echo "Want to try it? Go ahead!"
    gum input --placeholder "Press enter for another tip..." && show_power_tip
}

# Enhanced git commands
show_git_commands() {
    gum style \
        --border double \
        --border-foreground 208 \
        --padding "1 2" \
        --margin "1" \
        "🔥 GIT COMMAND MASTERY

🎯 VISUAL TOOLS (Recommended!)
lazygit       → Full git UI (BEST!)
tig           → Alternative git UI
gitui         → Another great option

⚡ YOUR SHORTCUTS
gs   → git status        gp   → git push
ga   → git add          gpl  → git pull  
gaa  → git add .        gco  → git checkout
gc   → git commit       gb   → git branch
gcm  → git commit -m    glog → pretty git log
gdiff → git diff (colored)
gw   → switch git worktrees (NEW!)

🚀 POWER COMMANDS
ginit         → Initialize repo with .gitignore
git add -p    → Stage specific parts
git bisect    → Find bug introductions
git stash     → Save work temporarily
git reflog    → Undo ANYTHING

💡 WORKFLOW TIPS
1. Use lazygit for everything!
2. Press Ctrl+G for quick status
3. Use 'gw' for worktree switching"
    
    echo ""
    if gum confirm "Open lazygit tutorial?"; then
        tutorial_lazygit
    fi
}

# Lazygit tutorial
tutorial_lazygit() {
    clear
    gum style \
        --border rounded \
        --border-foreground 208 \
        --padding "1 2" \
        "🔥 LAZYGIT QUICK TUTORIAL

MAIN PANELS:
• Status (top left)
• Files (left)
• Diff (right)
• Commands (bottom)

KEY SHORTCUTS:
Space  → Stage/unstage file
c      → Commit
p      → Push
P      → Pull
b      → Branches
s      → Stash
?      → Help (IMPORTANT!)

POWER MOVES:
a      → Stage all
d      → Delete/discard
e      → Edit file
v      → Open in editor
x      → Open menu
]      → Next tab
[      → Previous tab"
    
    echo ""
    if [ -d .git ]; then
        gum confirm "This is a git repo! Open lazygit?" && lazygit
    else
        echo "Not in a git repo. Navigate to one and type 'lazygit'!"
    fi
}

# Enhanced show_something_cool with more options
show_something_cool() {
    COOL=$(gum choose \
        "🎬 Matrix + Clock + System Split Screen" \
        "🎨 Custom ASCII Art Banner" \
        "🌈 Rainbow Terminal Party" \
        "📊 System Stats Dashboard" \
        "🎵 Music Visualizer" \
        "🌤️ Weather + Moon Phase" \
        "🎲 Terminal Game" \
        "💰 Crypto Prices" \
        "🦜 Parrot Party")
    
    case "$COOL" in
        "🎬 Matrix + Clock + System Split Screen")
            # Try to use tmux for split screen effect
            if command -v tmux >/dev/null; then
                tmux new-session \; \
                    split-window -h \; \
                    split-window -v \; \
                    send-keys 'cmatrix -b' C-m \; \
                    select-pane -t 0 \; \
                    send-keys 'btop' C-m \; \
                    select-pane -t 2 \; \
                    send-keys 'tty-clock -c -C 4' C-m
            else
                echo "Install tmux for the full effect!"
                cmatrix -b
            fi
            ;;
        "🎨 Custom ASCII Art Banner")
            NAME=$(gum input --placeholder "Enter your name..." --value "PABLO")
            echo "$NAME" | figlet -f slant | lolcat
            echo "is" | figlet -f small | lolcat
            echo "AWESOME" | figlet -f big | lolcat
            ;;
        "🌈 Rainbow Terminal Party")
            echo "🎉 PARTY MODE ACTIVATED 🎉" | figlet | lolcat
            fortune | ponysay | lolcat
            echo ""
            echo "Press Ctrl+C to stop the party..."
            while true; do
                echo "🎉 🎈 🎊 🎆 🎇 ✨ 🎉 🎈 🎊 🎆 🎇 ✨" | lolcat
                sleep 0.1
            done
            ;;
        "📊 System Stats Dashboard")
            clear
            neofetch
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat
            echo "Disk Usage:" | lolcat
            duf
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat
            echo "Network:" | lolcat
            echo "Public IP: $(curl -s ifconfig.me)"
            echo "Local IP: $(ipconfig getifaddr en0)"
            ;;
        "🎵 Music Visualizer")
            echo "🎵 Make sure music is playing! 🎵" | figlet -f small | lolcat
            cava
            ;;
        "🌤️ Weather + Moon Phase")
            weather
            echo ""
            curl -s wttr.in/Moon
            ;;
        "🎲 Terminal Game")
            echo "Let's play a game!" | cowsay | lolcat
            echo ""
            GAME=$(gum choose "🎯 Guess the number" "🎮 ASCII Invaders" "🏃 Run from the train")
            case "$GAME" in
                "🎯 Guess the number")
                    NUMBER=$((RANDOM % 100 + 1))
                    TRIES=0
                    echo "I'm thinking of a number between 1 and 100..."
                    while true; do
                        GUESS=$(gum input --placeholder "Your guess...")
                        ((TRIES++))
                        if [[ $GUESS -eq $NUMBER ]]; then
                            echo "🎉 Correct! It took you $TRIES tries!" | lolcat
                            break
                        elif [[ $GUESS -lt $NUMBER ]]; then
                            echo "📈 Higher!"
                        else
                            echo "📉 Lower!"
                        fi
                    done
                    ;;
                "🎮 ASCII Invaders")
                    echo "Coming soon! For now, try: brew install ninvaders"
                    ;;
                "🏃 Run from the train")
                    sl
                    ;;
            esac
            ;;
        "💰 Crypto Prices")
            echo "💰 CRYPTO PRICES 💰" | figlet -f small | lolcat
            curl -s rate.sx/btc
            echo ""
            curl -s rate.sx/eth
            ;;
        "🦜 Parrot Party")
            curl parrot.live
            ;;
    esac
    echo ""
    gum input --placeholder "Press enter to continue..."
}



# Enhanced fun commands with more demos
show_fun_commands() {
    gum style \
        --border double \
        --border-foreground 205 \
        --padding "1 2" \
        --margin "1" \
        "🎨 FUN & VISUAL COMMANDS

🌈 VISUAL EFFECTS
cmatrix       → Matrix rain
pipes-sh      → Animated pipes
rain          → Rain effect
asciiquarium  → Fish tank
sl            → Choo choo train!
neko          → Cat follows cursor
cava          → Audio visualizer
tty-clock -c  → Digital clock

🎭 TEXT ART
figlet text   → Big ASCII text
toilet text   → Colorful ASCII
cowsay text   → Cow speaks
ponysay text  → Pony speaks
fortune       → Random quotes
lolcat        → Rainbowify text

📊 SYSTEM BEAUTY
neofetch      → System + ASCII logo
pfetch        → Minimal version
btop          → Beautiful monitoring

🎮 COMBINATIONS
fortune | cowsay | lolcat
figlet PABLO | lolcat
echo 'Hello' | toilet -f mono12 | lolcat"
    
    echo ""
    DEMO=$(gum choose \
        "🌧️ Matrix Rain" \
        "🐠 Aquarium" \
        "🚂 Punishment Train" \
        "🎨 Text Art Combo" \
        "🌈 Rainbow Fortune" \
        "💻 System Info" \
        "🎵 Audio Visualizer" \
        "Skip demos")
    
    case "$DEMO" in
        "🌧️ Matrix Rain")
            timeout 5s cmatrix -b -C cyan
            ;;
        "🐠 Aquarium")
            timeout 10s asciiquarium
            ;;
        "🚂 Punishment Train")
            sl
            ;;
        "🎨 Text Art Combo")
            echo "PABLO" | figlet | lolcat
            echo "IS" | toilet -f mono12 | lolcat
            echo "AWESOME" | cowsay | lolcat
            ;;
        "🌈 Rainbow Fortune")
            fortune | ponysay | lolcat
            ;;
        "💻 System Info")
            neofetch
            ;;
        "🎵 Audio Visualizer")
            echo "Play some music and watch!"
            timeout 10s cava
            ;;
    esac
    gum input --placeholder "Press enter to continue..."
}

# Workflow tutorial
tutorial_workflow() {
    clear
    gum style \
        --border rounded \
        --border-foreground 212 \
        --padding "1 2" \
        "🎯 BUILD YOUR POWER WORKFLOW

Let's combine everything you've learned!

SCENARIO: Starting a new project"
    
    echo ""
    gum confirm "Ready to see a pro workflow?" && {
        echo -e "${GREEN}Step 1: Create and enter directory${NC}"
        echo "$ mkcd my-awesome-project"
        
        echo -e "\n${GREEN}Step 2: Initialize git${NC}"
        echo "$ ginit"
        
        echo -e "\n${GREEN}Step 3: Create some files${NC}"
        echo "$ touch README.md index.js"
        
        echo -e "\n${GREEN}Step 4: Open in editor (Ctrl+F to find files)${NC}"
        echo "$ code ."
        
        echo -e "\n${GREEN}Step 5: Use lazygit for version control${NC}"
        echo "$ lazygit"
        
        echo -e "\n${GREEN}Step 6: Quick commit${NC}"
        echo "$ gcm 'Initial commit'"
        
        echo -e "\n${GREEN}Step 7: Jump back anytime${NC}"
        echo "$ z awesome"
    }
    
    gum input --placeholder "You're ready! Press enter..."
}

# Ghostty shortcuts (updated)
show_ghostty_shortcuts() {
    gum style \
        --border double \
        --border-foreground 212 \
        --padding "1 2" \
        --margin "1" \
        "🎮 GHOSTTY SHORTCUTS - COMPLETE GUIDE

🚀 QUICK TERMINAL
Cmd+\`         → Toggle quick terminal (ANYWHERE!)
                 This is your #1 superpower!

📐 SPLITS & TABS
Cmd+D         → Split right
Cmd+Shift+D   → Split down
Cmd+T         → New tab
Cmd+W         → Close current
Cmd+[1-9]     → Jump to tab
Cmd+Shift+[/] → Previous/next tab

🎯 NAVIGATION
Cmd+←/→/↑/↓   → Navigate splits
Cmd+H/J/K/L   → Navigate (vim style) [NEW!]
Mouse hover   → Focus follows mouse!
Cmd+Shift+Z   → Zoom/unzoom split
Cmd+Shift+E   → Equalize splits

⚙️ CONTROLS
Cmd+K         → Clear screen
Cmd+R         → Reload config instantly
Cmd+Plus/Min  → Zoom in/out
Cmd+0         → Reset zoom
Cmd+F         → Find in terminal
Cmd+G/Shift+G → Find next/previous
Cmd+I         → Inspector (debug)

🎨 APPEARANCE
Cmd+Shift+F   → Fullscreen
Your theme    → UltraViolent (sick!)
Your font     → JetBrains Mono"
    
    echo ""
    if gum confirm "Test quick terminal? (Press Cmd+\` after)"; then
        echo "Minimize this window, then press Cmd+\` from any app!"
        echo "It's your instant terminal from anywhere!"
        gum input --placeholder "Press enter when you've tried it..."
    fi
}

# Svelte Development Section
show_svelte_dev() {
    gum style \
        --border double \
        --border-foreground 214 \
        --padding "1 2" \
        --margin "1" \
        "🚀 SVELTE DEVELOPMENT COMMANDS

📦 PROJECT STARTERS
sv        → Create Vite + Svelte app
svkit     → Create SvelteKit app
sva       → Svelte adders (Tailwind, etc)

⚡ DEVELOPMENT SHORTCUTS
dev       → npm run dev
build     → npm run build
preview   → npm run preview
check     → npm run check
format    → Format with prettier
lint      → Run ESLint

🛠️ PNPM COMMANDS (Faster npm!)
pn        → pnpm
pni       → pnpm install
pnd       → pnpm dev
pnb       → pnpm build

🎯 CUSTOM FUNCTIONS
mkcomp    → Create Svelte component
          Usage: mkcomp Button
          Creates: src/lib/components/Button/Button.svelte

servethis → Quick static server
openproject → Open browser at dev URL

📁 PROJECT STRUCTURE
src/
├── lib/          # Reusable components
├── routes/       # SvelteKit pages
├── app.html      # HTML template
└── app.css       # Global styles

💡 WORKFLOW TIPS
1. Use 'sv' to start new project
2. Always use pnpm (faster!)
3. Press Cmd+\` for quick terminal
4. Use lazygit for version control"
    
    echo ""
    if gum confirm "Create a sample Svelte component?"; then
        COMP_NAME=$(gum input --placeholder "Component name (e.g., Button)...")
        if [ -n "$COMP_NAME" ]; then
            echo "Would create: src/lib/components/$COMP_NAME/$COMP_NAME.svelte"
            echo "With props, styles, and TypeScript ready!"
        fi
    fi
}

# Dotfiles Management Section
show_dotfiles_management() {
    gum style \
        --border double \
        --border-foreground 99 \
        --padding "1 2" \
        --margin "1" \
        "📦 DOTFILES MANAGEMENT

📂 YOUR SETUP
Location: ~/dotfiles
GitHub: github.com/pibulus/dotfiles
Install: ./install.sh

🔄 UPDATING DOTFILES
1. Edit any config file
2. cd ~/dotfiles
3. git add .
4. git commit -m 'Update X'
5. git push

📝 KEY FILES
.zshrc              → Shell config
.gitconfig          → Git settings
.config/starship.toml → Prompt
.config/ghostty/    → Terminal
Brewfile            → All your tools
bin/cheat           → This menu!

🆕 ADDING NEW TOOLS
1. brew install toolname
2. brew bundle dump --force
3. Commit updated Brewfile

🔧 TESTING ON NEW MACHINE
git clone https://github.com/pibulus/dotfiles ~/dotfiles
cd ~/dotfiles
./install.sh

💡 QUICK EDITS
zshrc     → Edit shell config
reload    → Reload shell
ghosttyconf → Edit terminal

⚠️ REMEMBER
- Commit often
- Write good commit messages
- Update README when adding features"
    
    echo ""
    if gum confirm "Check dotfiles status?"; then
        cd ~/dotfiles
        echo -e "${GREEN}Git Status:${NC}"
        git status --short
        echo -e "\n${GREEN}Last 5 commits:${NC}"
        git log --oneline -5
        cd - > /dev/null
    fi
}

# Test Setup Function
test_setup() {
    clear
    echo -e "${CYAN}"
    figlet "Setup Test" | lolcat
    echo -e "${NC}"
    
    echo "🧪 Testing Pablo's Terminal Setup..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Test essential commands
    echo -e "\n${YELLOW}Essential Tools:${NC}"
    command -v brew >/dev/null && echo "✅ Homebrew" || echo "❌ Homebrew"
    command -v git >/dev/null && echo "✅ Git" || echo "❌ Git"
    command -v zsh >/dev/null && echo "✅ Zsh" || echo "❌ Zsh"
    
    # Test modern CLI tools
    echo -e "\n${YELLOW}Modern CLI Tools:${NC}"
    command -v bat >/dev/null && echo "✅ bat (better cat)" || echo "❌ bat"
    command -v eza >/dev/null && echo "✅ eza (better ls)" || echo "❌ eza"
    command -v fd >/dev/null && echo "✅ fd (better find)" || echo "❌ fd"
    command -v rg >/dev/null && echo "✅ ripgrep (better grep)" || echo "❌ ripgrep"
    command -v fzf >/dev/null && echo "✅ fzf (fuzzy finder)" || echo "❌ fzf"
    command -v zoxide >/dev/null && echo "✅ zoxide (smart cd)" || echo "❌ zoxide"
    command -v btop >/dev/null && echo "✅ btop (system monitor)" || echo "❌ btop"
    command -v lazygit >/dev/null && echo "✅ lazygit" || echo "❌ lazygit"
    command -v delta >/dev/null && echo "✅ delta (git diffs)" || echo "❌ delta"
    
    # Test development tools
    echo -e "\n${YELLOW}Development Tools:${NC}"
    command -v node >/dev/null && echo "✅ Node.js $(node --version)" || echo "❌ Node.js"
    command -v pnpm >/dev/null && echo "✅ pnpm" || echo "❌ pnpm"
    command -v code >/dev/null && echo "✅ VS Code" || echo "❌ VS Code"
    
    # Test fun tools
    echo -e "\n${YELLOW}Fun Tools:${NC}"
    command -v cmatrix >/dev/null && echo "✅ cmatrix" || echo "❌ cmatrix"
    command -v asciiquarium >/dev/null && echo "✅ asciiquarium" || echo "❌ asciiquarium"
    command -v figlet >/dev/null && echo "✅ figlet" || echo "❌ figlet"
    command -v lolcat >/dev/null && echo "✅ lolcat" || echo "❌ lolcat"
    
    # Test configs
    echo -e "\n${YELLOW}Configuration Files:${NC}"
    [ -f ~/.zshrc ] && echo "✅ .zshrc" || echo "❌ .zshrc"
    [ -f ~/.gitconfig ] && echo "✅ .gitconfig" || echo "❌ .gitconfig"
    [ -f ~/.config/starship.toml ] && echo "✅ Starship config" || echo "❌ Starship"
    [ -f "$HOME/Library/Application Support/com.mitchellh.ghostty/config" ] && echo "✅ Ghostty config" || echo "❌ Ghostty"
    
    # Test custom commands
    echo -e "\n${YELLOW}Custom Commands:${NC}"
    command -v cheat >/dev/null && echo "✅ cheat menu" || echo "❌ cheat menu"
    type mkcd >/dev/null 2>&1 && echo "✅ mkcd function" || echo "❌ mkcd"
    type z >/dev/null 2>&1 && echo "✅ z (zoxide)" || echo "❌ z"
    
    echo -e "\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Count results
    TOTAL=$(( $(echo -e "$output" | grep -c "✅") + $(echo -e "$output" | grep -c "❌") ))
    PASSED=$(echo -e "$output" | grep -c "✅")
    
    echo -e "${GREEN}Setup Status: Excellent!${NC}"
    echo "Most tools are installed and configured."
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

# Start with welcome if first run
show_welcome

# Start the menu
show_menu
